/**
@page user-doc-available-assertions Available assertions

@section Introduction Introduction

This page will introduce the list of available assertions and give a usage example for each one :

@section Baseformat Base format

All assertion are declared by using the format :

@code
SVUT_ASSERT_NAME( expected , actual );
@endcode

@section Assertionlist Assertion list

Currently the library support the next assertions :

<table><tr><th> Assertion name </th><th> Assertion parameters </th><th> Tested condition </th><th> Final status on error 
</th></tr><tr><td> <em>SVUT_ASSERT_TRUE</em>        </td><td> x                          </td><td> x == true               </td><td> FAILED                     

</td></tr><tr><td> <em>SVUT_ASSERT_FALSE</em>       </td><td> x                          </td><td> x != false              </td><td> FAILED                     
</td></tr><tr><td> <em>SVUT_ASSERT_NULL</em>        </td><td> x                          </td><td> x == NULL               </td><td> FAILED                     

</td></tr><tr><td> <em>SVUT_ASSERT_NOT_NULL</em>    </td><td> x                          </td><td> x != NULL               </td><td> FAILED                     
</td></tr><tr><td> <em>SVUT_ASSERT_EQUAL</em>       </td><td> expected, actual           </td><td> expected == actual      </td><td> FAILED                     

</td></tr><tr><td> <em>SVUT_ASSERT_NOT_EQUAL</em>   </td><td> expected, actual           </td><td> expected != actual      </td><td> FAILED                     
</td></tr><tr><td> <em>SVUT_ASSERT_EQUAL_TYPE</em>  </td><td> expected, actual           </td><td> expected == actual  &amp;&amp; sameTypeArgs(expected,actual) </td><td> FAILED                     

</td></tr><tr><td> <em>SVUT_ASSERT_NOT_EQUAL_TYPE</em> </td><td> expected, actual        </td><td> expected != actual  &amp;&amp; sameTypeArgs(expected,actual) </td><td> FAILED                     
</td></tr><tr><td> <em>SVUT_ASSERT_SAME</em>        </td><td> void * expected, void * actual           </td><td> expected == actual      </td><td> FAILED                     

</td></tr><tr><td> <em>SVUT_ASSERT_NOT_NAME</em>    </td><td> void * expected, void * actual           </td><td> expected == actual      </td><td> FAILED                     
</td></tr><tr><td> <em>SVUT_ASSERT_FAIL</em>        </td><td> message                    </td><td> false                   </td><td> FAILED                     

</td></tr><tr><td> <em>SVUT_ASSERT_TODO</em>        </td><td> message                    </td><td> false                   </td><td> TODO                       
</td></tr><tr><td> <em>SVUT_ASSERT_INDEV</em>       </td><td> message                    </td><td> false                   </td><td> INDEV                      

</td></tr><tr><td> <em>SVUT_ASSERT_NOT_EXEC_THIS</em> </td><td> message                  </td><td> false                   </td><td> FAILED                     
</td></tr><tr><td> <em>SVUT_ASSERT_THROW</em>       </td><td> exceptName, code           </td><td style="text-align: right;"> try {code; throw ERROR} catch (exceptName) {} catch (...) {throw ERROR}</td><td> FAILED                     

</td></tr><tr><td> <em>SVUT_ASSERT_THROW_SOMETHING</em> </td><td> code                   </td><td> try {code; throw ERROR} catch (...} {} </td><td> FAILED                     
</td></tr><tr><td> <em>SVUT_ASSERT_NOT_THROW</em>   </td><td> exceptName, code           </td><td> try {code} catch(exceptName) {throw ERROR} catch (...) {} </td><td> FAILED                     

</td></tr><tr><td> <em>SVUT_ASSERT_MAY_NOT_THROW</em> </td><td> code                     </td><td> try {code} catch(...) {throw ERROR} </td><td> FAILED                     
</td></tr></table>

@section Exampleofusage Example of usage

This section will give some simple examples of usage of the previous assertions :

@subsection SVUT_ASSERT_TRUE SVUT_ASSERT_TRUE

Assert a boolean value.

@code
bool myBoolTrue = true;
bool myBoolFalse = false;

//will pass
SVUT_ASSERT_TRUE( myBoolTrue );

//will fail
SVUT_ASSERT_TRUE( myBoolFalse );
@endcode

@subsection SVUT_ASSERT_FALSE SVUT_ASSERT_FALSE

Assert a boolean value.

@code
bool myBoolTrue = true;
bool myBoolFalse = false;

//will pass
SVUT_ASSERT_FALSE( myBoolFalse );

//will fail
SVUT_ASSERT_FALSE( myBoolTrue );
@endcode

@subsection SVUT_ASSERT_NULL SVUT_ASSERT_NULL

Test the address of a given pointer and fail if not NULL.

@code
char * ptrNull = NULL;
char * ptrNotNull = "Hello World!";

//will pass
SVUT_ASSERT_NULL( ptrNull );

//will fail
SVUT_ASSERT_NULL( ptrNotNull );
@endcode

@subsection SVUT_ASSERT_NOT_NULL SVUT_ASSERT_NOT_NULL

Test the address of a given pointer and fail if NULL.

@code
char * ptrNull = NULL;
char * ptrNotNull = "Hello World!";

//will pass
SVUT_ASSERT_NOT_NULL( ptrNotNull );

//will fail
SVUT_ASSERT_NOT_NULL( ptrNull );
@endcode

@subsection SVUT_ASSERT_EQUAL SVUT_ASSERT_EQUAL

Apply the == operator between the two given values and fail if it return false. Their is no need to use the same type if the operator is available.

@code
std::string str1 = "Hello World!";
std::string str2 = "Hello World!";
std::string str3 = "Bye bye World!";

//will pass
SVUT_ASSERT_EQUAL( str1 , str2 );
//will pass even if not same type (char*, std::string)
SVUT_ASSERT_EQUAL( "Hello World!" , str2 );

//will fail
SVUT_ASSERT_EQUAL( str1 , str3 );
@endcode

<b>Caution</b>, into SVUT_ASSERT_EQUAL, char * will be considered as a string, so it test the string value, not the pointer, so we got :

@code
const char * str1 = "Hello World!";
const char * str2 = "Hello World!";
const char * str3 = "Bye bye World!";

//will pass
SVUT_ASSERT_EQUAL( str1 , str2 );
SVUT_ASSERT_EQUAL( "Hello World!" , str2 );

//will fail
SVUT_ASSERT_EQUAL( str1 , str3 );
@endcode

To compare the pointers addresses, use SVUT_ASSERT_SAME instead.

@subsection SVUT_ASSERT_NOT_EQUAL SVUT_ASSERT_NOT_EQUAL

Apply the != operator between the two given values and fail if it return false. Their is no need to use the same type if the operator is available.

@code
std::string str1 = "Hello World!";
std::string str2 = "Hello World!";
std::string str3 = "Bye bye World!";

//will pass
SVUT_ASSERT_EQUAL( str1 , str3 );
//will pass even if not same type (const char*, std::string)
SVUT_ASSERT_EQUAL( "Bye bye World!" , str2 );

//will fail
SVUT_ASSERT_EQUAL( str1 , str2 );
@endcode

<b>Caution</b>, into SVUT_ASSERT_NOT_EQUAL, char * will be considered as a string, so it test the string value, not the pointer, so we got :

@code
const char * str1 = "Hello World!";
const char * str2 = "Hello World!";
const char * str3 = "Bye bye World!";

//will pass
SVUT_ASSERT_EQUAL( str1 , str3 );
SVUT_ASSERT_EQUAL( "Bye bye World!" , str2 );

//will fail
SVUT_ASSERT_EQUAL( str1 , str2 );
@endcode

To compare the pointers addresses, use SVUT_ASSERT_NOT_SAME instead.

@subsection SVUT_ASSERT_EQUAL_STRICT SVUT_ASSERT_EQUAL_STRICT

Apply the == operator between the two given values and fail if it return false. It's required to get the same type for the two members or it will not compile.

@code
std::string str1 = "Hello World!";
std::string str2 = "Hello World!";
std::string str3 = "Bye bye World!";

//will pass
SVUT_ASSERT_EQUAL_STRICT( str1 , str2 );

//will fail
SVUT_ASSERT_EQUAL_STRICT( str1 , str3 );

//will not compile due to types (const char*, std::string)
SVUT_ASSERT_EQUAL_STRICT( "Hello World!" , str2 );
@endcode

@subsection SVUT_ASSERT_NOT_EQUAL_STRICT SVUT_ASSERT_NOT_EQUAL_STRICT

Apply the != operator between the two given values and fail if it return false. It's required to get the same type for the two members or it will not compile.

@code
std::string str1 = "Hello World!";
std::string str2 = "Hello World!";
std::string str3 = "Bye bye World!";

//will pass
SVUT_ASSERT_EQUAL_STRICT( str1 , str3 );

//will fail
SVUT_ASSERT_EQUAL_STRICT( str1 , str2 );

//will not compile due to types (const char*, std::string)
SVUT_ASSERT_EQUAL_STRICT( "Bye bye World!" , str2 );
@endcode

@subsection SVUT_ASSERT_SAME SVUT_ASSERT_SAME

Test if the two members are the same by testing their addresses. Strictly speaking, this is equivalent to SVUT_ASSERT_EQUAL except for char * types. Here, we prefer to mark the semantic variation by the two and use SAME while comparing pointers, this may be more clear while reading the tests.

NULL is considered as a valid value here.

@code
const char * ptr1 = "HelloWorld!"
const char * ptr2 = ptr1;
const char * ptr3 = "HelloWorld!"
int i1 = 2;
int & i2 = i1;
int i3 = 2;

//will pass
SVUT_ASSERT_SAME( ptr1 , ptr2 );
SVUT_ASSERT_SAME( &i1 , &i2 );
SVUT_ASSERT_SAME( NULL , NULL );

//will fail
SVUT_ASSERT_SAME( ptr1 , ptr3 );
SVUT_ASSERT_SAME( &i1 , &i3 );
@endcode

@subsection SVUT_ASSERT_NOT_NAME SVUT_ASSERT_NOT_NAME

Test if the two members are the same by testing their addresses. Strictly speaking, this is equivalent to SVUT_ASSERT_NOT_EQUAL except for char * types. Here, we prefer to mark the semantic variation by the two and use SAME while comparing pointers, this may be more clear while reading the tests.

NULL is considered as a valid value here.

@code
const char * ptr1 = "HelloWorld!"
const char * ptr2 = ptr1;
const char * ptr3 = "HelloWorld!"
int i1 = 2;
int & i2 = i1;
int i3 = 2;

//will pass
SVUT_ASSERT_NOT_SAME( ptr1 , ptr3 );
SVUT_ASSERT_NOT_SAME( &i1 , &i3 );
SVUT_ASSERT_NOT_SAME( NULL , ptr1 );

//will fail
SVUT_ASSERT_NOT_SAME( ptr1 , ptr2 );
SVUT_ASSERT_NOT_SAME( &i1 , &i2 );
@endcode

@subsection SVUT_ASSERT_FAIL SVUT_ASSERT_FAIL

Will fail by default. This may be used to force the test to fail, for example for complex tests or assertion capturing. You can give your own description :

@code
SVUT_ASSERT_FAIL( "Force the test to fail!" );
@endcode

@subsection SVUT_ASSERT_TODO SVUT_ASSERT_TODO

Mark the test as TODO, this may be used while declaring a test, but not implemented it immediately :

@code
SVUT_ASSERT_TODO( "Need to implement!" );
SVUT_ASSERT_TODO( "Need update!" );
@endcode

@subsection SVUT_ASSERT_INDEV SVUT_ASSERT_INDEV

Mark the test as in development, caution, it stop the execution. It may be a good way to test things by aborting the test before the end and clearly seen which test we are using.

@code
SVUT_ASSERT_INDEV( "It pass, but caution, we are changing the related implementation ! ");
@endcode

@subsection SVUT_ASSERT_NOT_EXEC_THIS SVUT_ASSERT_NOT_EXEC_THIS

This assertion provide a cleaner way to check if a specific portion of code mustn't be executed instead of calling SVUT_ASSERT_FAIL().

@code
SVUT_ASSERT_NOT_EXEC_THIS( "Don't pass here!!!!" );
@endcode

@subsection SVUT_ASSERT_THROW SVUT_ASSERT_THROW

Thanks to this macro, you can easily implement exception testing without playing with try/catch/SVUT_ASSERT_NOT_EXEC_THIS/SVUT_ASSERT_FAIL. SVUT_ASSERT_THROW will check if the function will throw a specific assertion :

@code
void test1() { throw BadType;  }
void test2() { throw BadValue; }
void test3() {                 }

//will pass
SVUT_ASSERT_THROW(BadType, test1(); );

//will fail
SVUT_ASSERT_THROW(BadType, test2(); );
SVUT_ASSERT_THROW(BadType, test3(); );
@endcode

@subsection SVUT_ASSERT_THROW_SOMETHING SVUT_ASSERT_THROW_SOMETHING

Thanks to this macro, you can easily implement exception testing without playing with try/catch/SVUT_ASSERT_NOT_EXEC_THIS/SVUT_ASSERT_FAIL. SVUT_ASSERT_THROW_SOMETHING will check if the function will throw an exception, without not check on its type :

@code
void test1() { throw BadType;  }
void test2() { throw BadValue; }
void test3() {                 }

//will pass
SVUT_ASSERT_THROW_SOMETHING( test1(); );
SVUT_ASSERT_THROW_SOMETHING( test2(); );

//will fail
SVUT_ASSERT_THROW_SOMETHING( test3(); );
@endcode

@subsection SVUT_ASSERT_NOT_THROW SVUT_ASSERT_NOT_THROW

Thanks to this macro, you can easily implement exception testing without playing with try/catch/SVUT_ASSERT_NOT_EXEC_THIS/SVUT_ASSERT_FAIL. SVUT_ASSERT_MAY_NOT_THROW will check if the function will not throw a particular exception, an other one or none is consider as valid :

@code
void test1() { throw BadType;  }
void test2() { throw BadValue; }
void test3() {                 }

//will pass
SVUT_ASSERT_NOT_THROW(BadType, test3(); );
SVUT_ASSERT_NOT_THROW(BadType, test2(); );

//will fail
SVUT_ASSERT_NOT_THROW(BadType, test1(); );
@endcode

@subsection SVUT_ASSERT_MAY_NOT_THROW SVUT_ASSERT_MAY_NOT_THROW

Thanks to this macro, you can easily implement exception testing without playing with try/catch/SVUT_ASSERT_NOT_EXEC_THIS/SVUT_ASSERT_FAIL. SVUT_ASSERT_MAY_NOT_THROW will check if the function will success :

@code
void test1() { throw BadType;  }
void test2() { throw BadValue; }
void test3() {                 }

//will pass
SVUT_ASSERT_MAY_NOT_THROW( test3(); );

//will fail
SVUT_ASSERT_MAY_NOT_THROW( test1(); );
SVUT_ASSERT_MAY_NOT_THROW( test2(); );
@endcode
**/
