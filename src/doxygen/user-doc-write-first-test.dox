/*****************************************************
             PROJECT  : svUnitTest
             VERSION  : 0.5.0-dev
             DATE     : 11/2012
             AUTHOR   : Valat SÃ©bastien
             LICENSE  : CeCILL-C 2.1
*****************************************************/
/**
@page user-doc-write-first-test Write your first unit test

Here, we will explain briefly how to write a simple test case. We will test the std string class.

You can get the source of this example into <em>src/examples/std_string</em>.

@section Aboutobjectvsfunctionapproach About object vs function approach

svUnitTest provide two ways to implements tests. The original one is bases on classes (explained here) and another one based on flat C like functions. You can find documentation on this mode on page : @subpage user-doc-no-class.

The flat function approach may be easier for quick tests in simple projects.

@section Methodstotest Methods to test

For our example, we will test the methods :

 - std::string::size()
 - std::string::clear()
 - std::string::operator+

@section Testdeclaration Test declaration

For this example, we will place all the lines into the same <em>testString.cpp</em> file. We don't need to declare headers and the class will not be shared between multiple C++ files.

@subsection Includefilesandenablenamespaces Include files and enable namespaces

First, we need to include the svUnitTest.h file and enable the svUnitTest namespace. 

@code
//needed to build a new test case.
#include <svUnitTest/svUnitTest.h>

using namespace svUnitTest;
@endcode

@subsection Declarethetestcase Declare the test case

A test case is represented by a class based on svutTestCase. It require the implementation of methods :

- <em>setUp</em>, <em>tearDown</em> which are called before and after each test method.
- <em>testMethodsRegistration</em> which will be used to register unit tests.

@code
class testString : public svutTestCase
{
    public:
       testString(void);
       virtual void setUp(void);
       virtual void tearDown(void);
       virtual void testMethodsRegistration(void);
};
@endcode

@subsection Declarethetestmethods Declare the test methods

Each test will be declared as a method without arguments.

@code
class testString : public svutTestCase
{
    public:
       testString(void);
       virtual void setUp(void);
       virtual void tearDown(void);
       virtual void testMethodsRegistration(void);
   protected:
       void testSize(void);
       void testClear(void);
       void testOperatorPlus(void);
};
@endcode

@section Basictestimplementation Basic test implementation

For moment, we will implement the strict minimum requirement to compile the testCase and check declaration, so we will not implement the test content.

First, setup the test name by calling explicitly call the svutTestCase(name) constructor.

@code
testString::testString(void) 
           :svutTestCase(testString)
{
}
@endcode

Now register all tests into <em>testMethodsRegistration()</em> by calling the macro SVUT_REG_TEST_METHOD(method) :

@code
void testString::testMethodsRegistration(void)
{
     SVUT_REG_TEST_METHOD(testSize);
     SVUT_REG_TEST_METHOD(testClear);
     SVUT_REG_TEST_METHOD(testOperatorPlus);
};
@endcode

The <em>setUp()</em> and <em>tearDown()</em> methods stay empty for moment :

@code
void testString::setUp(void)    {};
void testString::tearDown(void) {};
@endcode

To mark the tests as not implement, we will firstly use the macro SVUT_ASSERT_TODO(message) to mark them as non implemented, this may help to clearly evaluate our progression in test writing.

@code
void testString::testSize(void)           { SVUT_ASSERT_TODO("Need implementation");};
void testString::testClear(void)           { SVUT_ASSERT_TODO("Need implementation");};
void testString::testOperatorPlus(void   ) { SVUT_ASSERT_TODO("Need implementation");};
@endcode

@section Mainfunctionforstandalonetests Main function for standalone tests

If you consider a standalone test (one executable per test case), you can register the test case by calling the macro SVUT_REGISTER_STANDELONE(test_case_name) from svutDefaultMain.h :


@code
#include <svUnitTest/svUnitTest.h>

//Declare class testString before this line

////Now register the test case and generate the default main function
SVUT_REGISTER_STANDALONE(testString);
@endcode

To register mutiple test in the same executable, please check documentation of macros <em>SVUT_REGISTER_TEST_CASE()</em> and <em>SVUT_USE_DEFAULT_MAIN</em>.

@section Compileandrun Compile and run

Now you can compile the test by calling :

@code
g++ -o testString testString.cpp -lsvUnitTest 
./testCase
@endcode

If the library isn't installed into /usr, you may use :

@code
g++ -Iyour/prefix/include -o testString testString.cpp -Lyour/prefix/lib/ -lsvUnitTest 
@endcode

You may get this output :

@verbatim
=======  testString                               ========
 * testSize                                     [ TODO ]
 * testClear                                    [ TODO ]
 * testOperatorPlus                             [ TODO ]

+---------------------------+
|    SUMMARY                |
+---------------------------+
|  SUCCESS  :    0 (  0 %)  |
|  INDEV    :    0 (  0 %)  |
|  TODO     :    3 (100 %)  |
|  FAILED   :    0 (  0 %)  |
|  UNKNOWN  :    0 (  0 %)  |
+---------------------------+
|  TOTAL    :    3          |
|  STATUS   : TODO          |
+---------------------------+
@endverbatim

You can filter the tests to execute by using :

@code
./testString -a ::testSize -a ::testClear
@endcode

So you get : 
@verbatim
=======  testString                               ========
 * testSize                                     [ TODO ]
 * testClear                                    [ TODO ]

+---------------------------+
|    SUMMARY                |
+---------------------------+
|  SUCCESS  :    0 (  0 %)  |
|  INDEV    :    0 (  0 %)  |
|  TODO     :    2 (100 %)  |
|  FAILED   :    0 (  0 %)  |
|  UNKNOWN  :    0 (  0 %)  |
+---------------------------+
|  TOTAL    :    2          |
|  STATUS   : TODO          |
+---------------------------+
@endverbatim

@section Implementthetests Implement the tests

Now we can implement each tests, step by step.

@subsection Instantiateastringobject Instantiate a string object

To test the string class, we need to instantiate a string object. To do this, we declare a string pointer into the class and allocate it into setUp, then destroy it into tearDown. So the object will be a new object for each tests which ensure no requirement on test ordering.

To not reuse the same object between tests also avoid error propagation. If a test fail, we didn't want to propagate the error to others test by using a corrupted object.

@code
#include <string>

using namespace std;

class testString : public svutTestCase
{
    public:
       //....
    protected:
       //....
       string * obj;
}

void testString::setUp(void)
{
   this->obj = new string("Hello World !!!");
}

void testString::tearDown(void)
{
   delete this->obj;
}
@endcode

@subsection Implementthetests Implement the tests

Now we implement the tests methods :

@code
void testString::testSize(void)
{
     //assume "Hello World !!!" contain 15 characters
     SVUT_ASSERT_EQUAL(15,obj->size());
}

void testString::testClear(void)
{
    //pre check
    SVUT_ASSERT_EQUAL(15,obj->size());
    SVUT_ASSERT_EQUAL("Hello World !!!",*obj);

    obj->clear();

    //post check
    SVUT_ASSERT_EQUAL(0,obj->size());
    SVUT_ASSERT_EQUAL("",*obj);
}

void testString::testOperatorPlus(void)
{
    //pre check
    SVUT_ASSERT_EQUAL(15,obj->size());
    SVUT_ASSERT_EQUAL("Hello World !!!",*obj);

    *obj = (*obj) + " Tested.";

    //post check
    SVUT_ASSERT_EQUAL(23,obj->size());
    SVUT_ASSERT_EQUAL("Hello World !!! Tested.",*obj); 
}
@endcode

@subsection Executethetests Execute the tests

Now you may get :

@verbatim
=======  testString                               ========

+---------------------------+
|    SUMMARY                |
+---------------------------+
|  SUCCESS  :    3 (100 %)  |
|  INDEV    :    0 (  0 %)  |
|  TODO     :    0 (  0 %)  |
|  FAILED   :    0 (  0 %)  |
|  UNKNOWN  :    0 (  0 %)  |
+---------------------------+
|  TOTAL    :    3          |
|  STATUS   : SUCCESS       |
+---------------------------+
@endverbatim
**/
