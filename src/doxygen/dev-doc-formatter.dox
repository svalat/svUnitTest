/*****************************************************
             PROJECT  : svUnitTest
             VERSION  : 0.4.0
             DATE     : 11/2012
             AUTHOR   : Valat Sébastien
             LICENSE  : CeCILL-C
*****************************************************/
/**
@page dev-doc-formatter The output system

@section Description Description

As we want to support multiple output format :

 - Black and white text for standard output
 - Colored text for standard output
 - XML output for external usage
 - Qt UnitTest XML output for QT compatility and integration in KDevelop 4

So we use an abstract definition of outputer defined by class svutResultFormatter. At this level we define some <em>events</em> to display. The basic mechanisms is defined from XML requirement with open/close events :

<table><tr><th> Name </th><th> Parameters </th><th> Description 
</th></tr><tr><td> openOutput </td><td style="text-align: center;">                  </td><td> Called before starting the first test. It's equivalent to onGlobalStart event in <em>svutListener</em>. 
</td></tr><tr><td> closeOutput </td><td style="text-align: center;">                  </td><td> Called after all the tests be runned. It's equivalent to onGlocalEnd event in <em>svutListener</em>. 

</td></tr><tr><td> openTestCase </td><td> testCase       </td><td> Called when starting a test case. It's equivalent to onTestCaseStart event in <em>svutListener</em>. 
</td></tr><tr><td> closeTestCase </td><td> testCase       </td><td> Called when endding a test case. It's equivalent to onTestCaseEnd event in <em>svutListener</em>. 
</td></tr><tr><td> openTestMethod </td><td> testCase,meth </td><td> Called when starting a test method. It's equivalent to onMethodStart event in <em>svutListener</em>. 

</td></tr><tr><td> closeTestMethod </td><td> testCase,meth,status </td><td> Called when endding a test method. It's equivalent to onMethodEnd event in <em>svutListener</em>. 
</td></tr><tr><td> printSummary   </td><td> summary  </td><td> Called to print the global summary of the test. It may by called from onGlobalEnd event at the end of the test. 
</td></tr></table>

@section Thesummary The summary

When displaying the summary we may display a global status, it may be ''SUCCESS'' is all tests are SUCCESS. If not, we choose the lower success level obtained. We can use status priority like that :

<table><tr><th> Status </th><th> Success level 
</th></tr><tr><td> SUCCESS       </td><td> 5                   
</td></tr><tr><td> INDEV         </td><td> 4                   
</td></tr><tr><td> TODO          </td><td> 3                   
</td></tr><tr><td> FAILED        </td><td> 2                   

</td></tr><tr><td> UNKNOWN       </td><td> 1                   
</td></tr></table>

This rule is supported by class <em>svutResultSummary</em>.

@section Theb&wtextformat The b&w text format

This is the standard output for terminals which didn't support colors. We may generate output similar to :

Without verbose mode we may mask SUCCESS so obtain :

@verbatim
=======  svMockObject                              ========
=======  svMockPointer                             ========
 * testConstructor_NULL                         [ UNKNOWN ]
 * testConstructor_TPtr                         [ TODO ]
=======  svMockEventChecker                        ========
 * getEventMatcher_Void                         [ INDEV ]
 * canBeRun                                     [ FAILED ]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Failed on BOOLEAN test.
line 82 of file /home/.../projects/........./file.cpp on methode getLine()
   - Actual : FALSE
   - Expected : TRUE
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

+---------------------------+
|    SUMMARY                |
+---------------------------+
|  SUCCESS  :  208 (100 %)  |
|  INDEV    :    0 (  0 %)  |
|  TODO     :    0 (  0 %)  |
|  FAILED   :    0 (  0 %)  |
|  UNKNOWN  :    0 (  0 %)  |
+---------------------------+
@endverbatim

In verbose mode we may use :

@verbatim
=======  svMockObject                              ========
 * testConstructor_default                      [ SUCCESS ]
 * testConstructor_BoolPtr                      [ SUCCESS ]
 * testClearRules                               [ SUCCESS ]
=======  svMockPointer                             ========
 * testConstructor_NULL                         [ UNKNOWN ]
 * testConstructor_TPtr                         [ TODO ]
 * testConstructor_TPtrBool                     [ SUCCESS ]
=======  svMockEventChecker                        ========
 * getEventMatcher_Void                         [ INDEV ]
 * getEventMatcher_Void_const                   [ SUCCESS ]
 * canBeRun                                     [ FAILED ]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Failed on BOOLEAN test.
line 82 of file /home/.../projects/........./file.cpp on methode getLine()
   - Actual : FALSE
   - Expected : TRUE
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

+---------------------------+
|    SUMMARY                |
+---------------------------+
|  SUCCESS  :    5 (100 %)  |
|  INDEV    :    1 (  0 %)  |
|  TODO     :    1 (  0 %)  |
|  FAILED   :    1 (  0 %)  |
|  UNKNOWN  :    1 (  0 %)  |
+---------------------------+
|  TOTAL    :    9          |
|  STATUS   : UNKNWON       |
+---------------------------+
@endverbatim

@section Thecoloredtextformat The colored text format

If the terminal support coloring, we simply use the same output format than B&W, and wrote the status name with colors. In the summary we may color the whole line, the status plus the value and percentage.

The stars behind the test method name will use green color.

We use colors :

<table><tr><td> <strong>Status</strong> </td><td> <strong>Color name</strong> </td><td> <strong>Color ID</strong> 
</td></tr><tr><td> SUCCESS      </td><td> green            </td><td> 32             
</td></tr><tr><td> TODO         </td><td> orange           </td><td> 33             

</td></tr><tr><td> INDEV        </td><td> blue             </td><td> 34             
</td></tr><tr><td> SKIPED       </td><td> orange           </td><td> 33             
</td></tr><tr><td> FAILED       </td><td> red              </td><td> 31             

</td></tr><tr><td> UNKNOWN      </td><td> red              </td><td> 31             
</td></tr></table>

Your can get more informations about terminal coloring on :

 - http://www.frexx.de/xterm-256-notes/
 - http://www.pixelbeat.org/docs/terminal_colours/

@section ThenativXMLformat The nativ XML format

The native XML format directly correspond to the event system : 

@code
<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE UnitTest SYSTEM 'svUnitTest_html/svUnitTest.dtd'>
<?xml-stylesheet type='text/xsl' href='svUnitTest_html/svUnitTest.xsl'?>
<UnitTest>
        <TestEnv>
                <LibVersion>0.3.0-dev</LibVersion>
                <TestDate>2011-03-09 20:30:36 CET</TestDate>
        </TestEnv>
	<TestCase>
		<name>svMockPointer</name>
		<TestFunction>
			<name>testConstructor_NULL</name>
			<status>success</status>
		</TestFunction>
		<TestFunction>
			<name>testConstructor_TPtr</name>
			<status>success</status>
		</TestFunction>
	</TestCase>
	<TestCase>
		<name>svMockEventChecker</name>
		<TestFunction>
			<name>getFilename</name>
			<status>indev</status>
			<AssertInfo>
				<location>
					<file>/home/......../svututCodeLocation.cpp</file>
					<methode>getFilename</methode>
					<line>68</line>
				</location>
				<message>indev</message>
				<entries>
				</entries>
			</AssertInfo>
		</TestFunction>
		<TestFunction>
			<name>getMethodeName</name>
			<status>todo</status>
			<AssertInfo>
				<location>
					<file>/home/......../svututCodeLocation.cpp</file>
					<methode>getMethodeName</methode>
					<line>75</line>
				</location>
				<message>toto</message>
				<entries>
				</entries>
			</AssertInfo>
		</TestFunction>
		<TestFunction>
			<name>getLine</name>
			<status>failed</status>
			<AssertInfo>
				<location>
					<file>/home/......../svututCodeLocation.cpp</file>
					<methode>getLine</methode>
					<line>82</line>
				</location>
				<message>Failed on BOOLEAN test.</message>
				<entries>
					<entry name='Actual'>FALSE</entry>
					<entry name='Expected'>TRUE</entry>
				</entries>
			</AssertInfo>
		</TestFunction>
	</TestCase>
	<GlobalResults>
		<result type='success'>208</result>
		<result type='indev'>1</result>
		<result type='todo'>1</result>
		<result type='failed'>1</result>
		<result type='unknown'>0</result>
		<total>208</total>
		<status>success</status>
	</GlobalResults>
</UnitTest>
@endcode

@section TheQtXMLformat The Qt XML format

The Qt XML format directly correspond to :

@code
<?xml version='1.0' encoding='UTF-8'?>
<TestCase name='svUnitTest'>
	<Environment>
		<svUnitTestVersion>0.0.1</svUnitTestVersion>
	</Environment>
	<TestFunction name='testConstructor_NULL'>
		<Incident type='pass' file='' line='0' />
	</TestFunction>
	<TestFunction name='testConstructor_TPtr'>
		<Incident type='pass' file='' line='0' />
	</TestFunction>
</TestCase>
@endcode

QT restrain à un cas test par fichier XML. Pour les erreurs :

@code
<?xml version='1.0' encoding='UTF-8'?>
<TestCase name='svUnitTest'>
<Environment>
	<svUnitTestVersion>0.0.1</svUnitTestVersion>
</Environment>
	<TestFunction name='constructor_Void'>
		<Incident type='pass' file='' line='0' />
	</TestFunction>
	<TestFunction name='constructor_StringStringInt'>
		<Incident type='pass' file='' line='0' />
	</TestFunction>
	<TestFunction name='getFilename'>
		<Incident type='warn' file='/src/test/svutUnitTest/svututCodeLocation.cpp' line='68'><Description><![CDATA[In dev : indev]]></Description></Incident>
	</TestFunction>
	<TestFunction name='getMethodeName'>
		<Incident type='fail' file='/src/test/svutUnitTest/svututCodeLocation.cpp' line='75'><Description><![CDATA[Todo : toto]]></Description></Incident>
	</TestFunction>
	<TestFunction name='getLine'>
		<Incident type='fail' file='/home/................../src/test/svutUnitTest/svututCodeLocation.cpp' line='82'><Description><![CDATA[Failed on BOOLEAN test.
   - Actual : FALSE
   - Expected : TRUE
]]></Description></Incident>
	</TestFunction>
	<TestFunction name='hasLocation'>
		<Incident type='pass' file='' line='0' />
	</TestFunction>
</TestCase>
@endcode

@section UMLdiagram UML diagram

''TODO''**/
