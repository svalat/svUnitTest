/*****************************************************
             PROJECT  : svUnitTest
             VERSION  : 0.3.0
             DATE     : 05/2011
             AUTHOR   : Valat SÃ©bastien
             LICENSE  : CeCILL-C
*****************************************************/
/**
@page user-doc-extend-macro Provide new assertions

While writing your tests, you may be interested by adding some specific assertions to facilitate your life. With svUnitTest as for CPPUnit, you can extend the assertion set.

@section Step1implementtherelatedexceptionclass Step 1 : implement the related exception class

First we need to define a new exception class based on svutExAssertFail and implement its constructor :

@code
class MyExAssertMyTestFail : public svutExAssertFail
{
	public:
		myExAssertMyTestFail(std::string expected,std::string actual, int anotherInfo,
		                     svutCodeLocation  location) throw();
};

MyExAssertMyTestFail::MyExAssertMyTestFail(std::string expected,std::string actual, int anotherInfo,
		                            svutCodeLocation  location) throw();
	: svutExAssertFail("AssertMyTest",SVUT_STATUS_FAILED,location,"Failed on my test.")
{
	info.addEntry("expected",exptected);
	info.addEntry("actual",actual);
	info.addEntry("anotherInfo",asserterToString(anotherInfo));
	//... add required failure informations
}
@endcode

@section Step2implementthetestfunction Step 2 : implement the test function

Now we can implement the function to call with the assertion macro :

@code
void assertMyTest(std::string expected, std::string actual,svutCodeLocation location) 
        throw(MyExAssertMyTestFail)
{
	int errorId = 0;
	//implement your test here ....

	if (errorId != 0)
	{
		throw MyExAssertMyTestFail(expected,actual,errorId,location);
	}
}
@endcode

@section Step3definethemacro Step 3 : define the macro

Now, we can define the final macro which will me used in our tests :

@code
#define SVUT_ASSERT_MYTEST(expected,actual) \
	assertMyTest((expected),(actual),SVUT_CODE_LOCATION)
@endcode
**/
